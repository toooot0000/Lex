// lex.yy.cpp generated by reflex 3.0.11 from test.l

#define REFLEX_VERSION "3.0.11"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#undef REFLEX_OPTION_YYLTYPE
#undef REFLEX_OPTION_YYSTYPE
#undef REFLEX_OPTION_bison_cc
#undef REFLEX_OPTION_bison_cc_namespace
#undef REFLEX_OPTION_bison_cc_parser
#undef REFLEX_OPTION_bison_complete
#undef REFLEX_OPTION_bison_locations
#undef REFLEX_OPTION_exception
#undef REFLEX_OPTION_header_file
#undef REFLEX_OPTION_lex
#undef REFLEX_OPTION_lexer
#undef REFLEX_OPTION_namespace
#undef REFLEX_OPTION_outfile
#undef REFLEX_OPTION_token_eof
#undef REFLEX_OPTION_token_type

#define REFLEX_OPTION_YYLTYPE             yy::location
#define REFLEX_OPTION_YYSTYPE             yy::parser::semantic_type
#define REFLEX_OPTION_bison_cc            true
#define REFLEX_OPTION_bison_cc_namespace  yy
#define REFLEX_OPTION_bison_cc_parser     parser
#define REFLEX_OPTION_bison_complete      true
#define REFLEX_OPTION_bison_locations     true
#define REFLEX_OPTION_exception           yy::parser::syntax_error(location(), "Unknown token.")
#define REFLEX_OPTION_header_file         "lex.yy.h"
#define REFLEX_OPTION_lex                 lex
#define REFLEX_OPTION_lexer               Lexer
#define REFLEX_OPTION_namespace           yy
#define REFLEX_OPTION_outfile             "lex.yy.cpp"
#define REFLEX_OPTION_token_eof           yy::parser::symbol_type(0, location())
#define REFLEX_OPTION_token_type          yy::parser::symbol_type

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %top user code                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 1 "test.l"

#include "parser.hpp"    /* Generated by bison. */
#include "location.hpp"  /* Generated by bison %locations. */


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  ABSTRACT LEXER CLASS                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/abslexer.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

namespace yy {

class Lexer : public reflex::AbstractLexer<reflex::Matcher> {
 public:
  typedef reflex::AbstractLexer<reflex::Matcher> AbstractBaseLexer;
  Lexer(
      const reflex::Input& input = reflex::Input(),
      std::ostream&        os    = std::cout)
    :
      AbstractBaseLexer(input, os)
  {
  }
  static const int INITIAL = 0;
  std::string filename;
  virtual yy::location location(void)
  {
    yy::location yylloc;
    yylloc.begin.filename = &filename;
    yylloc.begin.line = static_cast<unsigned int>(matcher().lineno());
    yylloc.begin.column = static_cast<unsigned int>(matcher().columno());
    yylloc.end.filename = &filename;
    yylloc.end.line = static_cast<unsigned int>(matcher().lineno_end());
    yylloc.end.column = static_cast<unsigned int>(matcher().columno_end());
    return yylloc;
  }
  virtual yy::parser::symbol_type lex(void);
};

} // namespace yy

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  BISON C++                                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 2: rules                                                          //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

yy::parser::symbol_type yy::Lexer::lex(void)
{
  static const char *REGEX_INITIAL = "(?m)(\\s+)|((?:\\QBegin\\E))|((?:(?:(?:[A-Za-z])|(?:_))(?:(?:[A-Za-z])|(?:_)|(?:[0-9]))*))|((?:[1-9](?:[0-9])*))|((?:\".*\"))|((?:\\Q+\\E))|((?:\\Q-\\E))|((?:\\Q*\\E))|((?:\\Q/\\E))|((?:\\Q=\\E))";
  static const reflex::Pattern PATTERN_INITIAL(REGEX_INITIAL);
  if (!has_matcher())
  {
    matcher(new Matcher(PATTERN_INITIAL, stdinit(), this));
  }
  while (true)
  {
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
#line 40 "test.l"
return yy::parser::make_EOF(location());
            }
            else
            {
              throw yy::parser::syntax_error(location(), "Unknown token.");
            }
            break;
          case 1: // rule test.l:23: \s+ :
#line 23 "test.l"
// skip space
            break;
          case 2: // rule test.l:24: "Begin" :
#line 24 "test.l"
return yy::parser::make_BEGIN(location());
            break;
          case 3: // rule test.l:25: {identifier} :
#line 25 "test.l"
{
    std::cout << text() << std::endl;
    return yy::parser::make_IDENTIFIER(str(), location());
}
            break;
          case 4: // rule test.l:29: {integer} :
#line 29 "test.l"
return yy::parser::make_INTEGER(atoi(text()), location());
            break;
          case 5: // rule test.l:30: {string} :
#line 30 "test.l"
{
    std::string t = str();
    std::cout << t.substr(1, t.size()-2) << std::endl;
    return yy::parser::make_STRING(t.substr(1, t.size()-2), location());
}
            break;
          case 6: // rule test.l:35: "+" :
#line 35 "test.l"
return yy::parser::make_PLUS(location());
            break;
          case 7: // rule test.l:36: "-" :
#line 36 "test.l"
return yy::parser::make_MINUS(location());
            break;
          case 8: // rule test.l:37: "*" :
#line 37 "test.l"
return yy::parser::make_STAR(location());
            break;
          case 9: // rule test.l:38: "/" :
#line 38 "test.l"
return yy::parser::make_SLASH(location());
            break;
          case 10: // rule test.l:39: "=" :
#line 39 "test.l"
return yy::parser::make_ASSIGN(location());
            break;
        }
  }
}
