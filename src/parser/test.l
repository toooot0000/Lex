%top{
#include "parser.hpp"    /* Generated by bison. */
#include "location.hpp"  /* Generated by bison %locations. */
}
%option bison-complete
%option bison-cc-namespace=yy
%option bison-cc-parser=parser
%option bison-locations
%option exception="yy::parser::syntax_error(location(), \"Unknown token.\")"
%option namespace=yy
%option lexer=Lexer
%option header-file

digit [0-9]
letter [a-zA-Z]
underscore _

integer [1-9]{digit}*
identifier ({letter}|{underscore})({letter}|{underscore}|{digit})*
string \".*\"

%%
\s+      // skip space
"Begin"     return yy::parser::make_BEGIN(location());
{identifier}   {
    std::cout << text() << std::endl;
    return yy::parser::make_IDENTIFIER(str(), location());
}
{integer}   return yy::parser::make_INTEGER(atoi(text()), location());
{string}    {
    std::string t = str();
    std::cout << t.substr(1, t.size()-2) << std::endl;
    return yy::parser::make_STRING(t.substr(1, t.size()-2), location());
}
"+"       return yy::parser::make_PLUS(location());
"-"       return yy::parser::make_MINUS(location());
"*"       return yy::parser::make_STAR(location());
"/"       return yy::parser::make_SLASH(location());
"="      return yy::parser::make_ASSIGN(location());
<<EOF>>  return yy::parser::make_EOF(location());
%%